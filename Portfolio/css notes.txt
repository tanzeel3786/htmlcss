CSS Notes

Overflow:auto. //This does not overflows the content inside school view

id is not reusable and should only be applied to one element. An id also has a higher specificity (importance) than a class so if both are applied to the same element and have conflicting styles, the styles of the id will be applied.

text-align: justify; spaces the text so that each line has equal width.

text-align: center; centers the text

text-align: right; right-aligns the text

And text-align: left; (the default) left-aligns the text.


The box-shadow property takes values for

offset-x (how far to push the shadow horizontally from the element),
offset-y (how far to push the shadow vertically from the element),
blur-radius,
spread-radius and
color, in that order.


The text-transform property in CSS is used to change the appearance of text.

CSS offers the line-height property to change the height of each line in a block



CSS position property is absolute, which locks the element in place relative to its parent container.

One key difference between the fixed and absolute positions is that an element with a fixed position won't move when the user scrolls.

z-index property can specify the order of how elements are stacked on top of one another.

p:hover {
  transform: scale(2.1);
}

The next function of the transform property is skewX(), which skews the selected element along its X (horizontal) axis by a given degree.

When elements have a specified position, such as fixed or relative, the CSS offset properties right, left, top, and bottom can be used in animation rules to create movement.
As shown in the example below, you can push the item downwards then upwards by setting the top property of the 50% keyframe to 50px, but having it set to 0px for the first (0%) and the last (100%) keyframe.

To keep the ball bouncing on the right on a continuous loop, change the animation-iteration-count property to infinite.

  animation-name: bounce;
    animation-duration: 1s;
    animation-iteration-count: infinite;


justify-content: center;, which aligns all the flex items to the center inside the flex container. Other options include:

flex-start: aligns items to the start of the flex container. For a row, this pushes the items to the left of the container. For a column, this pushes the items to the top of the container. This is the default alignment if no justify-content is specified.
flex-end: aligns items to the end of the flex container. For a row, this pushes the items to the right of the container. For a column, this pushes the items to the bottom of the container.
space-between: aligns items to the center of the main axis, with extra space placed between the items. The first and last items are pushed to the very edge of the flex container. For example, in a row the first item is against the left side of the container, the last item is against the right side of the container, then the remaining space is distributed evenly among the other items.
space-around: similar to space-between but the first and last items are not locked to the edges of the container, the space is distributed around all the items with a half space on either end of the flex container.
space-evenly: Distributes space evenly between the flex items with a full space at either end of the flex container